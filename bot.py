import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from game_manager import manager
from api_client import generate_ai_response
from config import BOT_TOKEN, TIMEOUT

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SELECT_THEME, COLLECT_ANSWERS, VOTING = range(3)


# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat = update.effective_chat
    user = update.effective_user

    if chat.type == "private":
        await update.message.reply_text("‚ùå –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–≥—Ä—ã!")
        return ConversationHandler.END

    manager.new_game(chat.id, user.id)
    themes = manager.themes[:10]
    theme_list = "\n".join([f"{i+1}. {theme}" for i, theme in enumerate(themes)])

    await update.message.reply_text(
        f"üéÆ **–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!**\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {user.full_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n{theme_list}",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã", callback_data="show_all")]]
        ),
    )
    return SELECT_THEME


async def show_all_themes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    theme_list = "\n".join([f"{i+1}. {theme}" for i, theme in enumerate(manager.themes)])
    for i in range(0, len(theme_list), 4000):
        await query.edit_message_text(
            text=f"–í—Å–µ —Ç–µ–º—ã:\n{theme_list[i:i+4000]}",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
            ),
        )
    return SELECT_THEME


async def select_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    raw_text = update.message.text.strip()

    if raw_text.startswith("/"):
        raw_text = raw_text[1:]

    try:
        choice = int(raw_text)
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5).")
        return SELECT_THEME

    try:
        if manager.set_theme(chat_id, choice):
            theme = manager.games[chat_id]["theme"]

            await update.message.reply_text(
                f"‚úÖ –¢–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞: *{theme}*\n\n"
                "‚è±Ô∏è –£ –∏–≥—Ä–æ–∫–æ–≤ –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–æ–≤!",
                parse_mode="Markdown",
            )

            context.job_queue.run_once(end_answers_phase, TIMEOUT, chat_id=chat_id)
            return COLLECT_ANSWERS
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return SELECT_THEME

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã ({chat_id}): {e}", exc_info=True)
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return SELECT_THEME


async def handle_private_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    text = update.message.text

    for chat_id, game in manager.games.items():
        if game["status"] == "collecting_answers" and user.id in game["players"]:
            if manager.add_answer(chat_id, user.id, text):
                await update.message.reply_text(
                    "‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."
                )
            else:
                await update.message.reply_text("‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–≤–µ—Ç!")
            break
    else:
        await update.message.reply_text("‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä, –≥–¥–µ –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ.")

    return COLLECT_ANSWERS


async def end_answers_phase(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    game = manager.games.get(chat_id)

    if not game or game["status"] != "collecting_answers":
        return

    manager.start_voting(chat_id)
    options = game["voting_options"]

    answers_text = "\n\n".join(
        [f"üîπ –û—Ç–≤–µ—Ç {i+1}: {ans}" for i, ans in enumerate(options)]
    )

    await context.bot.send_message(
        chat_id,
        f"üïí –í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã:\n\n{answers_text}\n\n"
        "‚ùì **–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å!**",
        parse_mode="Markdown",
    )

    keyboard = [
        [InlineKeyboardButton(f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}", callback_data=f"vote_{i}")]
        for i in range(len(options))
    ]

    for user_id in game["players"]:
        try:
            await context.bot.send_message(
                user_id,
                "üó≥Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:**",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown",
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    context.job_queue.run_once(end_voting_phase, TIMEOUT, chat_id)


async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user = query.from_user
    data = query.data

    try:
        option_idx = int(data.split("_")[1])
        for chat_id, game in manager.games.items():
            if game["status"] == "voting" and user.id in game["players"]:
                if manager.add_vote(chat_id, user.id, option_idx):
                    await query.answer("‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!")
                else:
                    await query.answer("‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!")
                break
        else:
            await query.answer("‚ÑπÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!")
    except Exception:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞!")

    return VOTING


async def end_voting_phase(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    game = manager.games.get(chat_id)

    if not game or game["status"] != "voting":
        return

    results_text, ai_answer = manager.get_results(chat_id)

    await context.bot.send_message(
        chat_id,
        f"üèÅ **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
        f"{results_text}\n\n"
        f"ü§ñ **–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:**\n{ai_answer}\n\n"
        "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –î–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        parse_mode="Markdown",
    )

    manager.end_game(chat_id)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    if chat_id in manager.games:
        manager.end_game(chat_id)
        await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    return ConversationHandler.END


# --- Main ---
def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_THEME: [
                CallbackQueryHandler(show_all_themes, pattern="^show_all$"),
                CallbackQueryHandler(start, pattern="^back_to_start$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_theme),
            ],
            COLLECT_ANSWERS: [
                MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_private_answer)
            ],
            VOTING: [CallbackQueryHandler(handle_vote, pattern="^vote_")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.TEXT, handle_private_answer))

    # --- –í–∞–∂–Ω–æ: Webhook –≤–º–µ—Å—Ç–æ Polling ---
    port = int(os.environ.get("PORT", 8443))
    app_url = os.getenv("RENDER_EXTERNAL_URL")
    if not app_url:
        raise RuntimeError("RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=BOT_TOKEN,
        webhook_url=f"{app_url}/{BOT_TOKEN}",
    )


if __name__ == "__main__":
    main()
