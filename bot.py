import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    CallbackContext, CallbackQueryHandler, ConversationHandler
)
from game_manager import manager
from api_client import generate_ai_response
from config import BOT_TOKEN, TIMEOUT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SELECT_THEME, COLLECT_ANSWERS, VOTING = range(3)

def start(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat = update.effective_chat
    user = update.effective_user
    
    if chat.type == 'private':
        update.message.reply_text("‚ùå –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–≥—Ä—ã!")
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    manager.new_game(chat.id, user.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–µ–º
    themes = manager.themes[:10]
    theme_list = "\n".join([f"{i+1}. {theme}" for i, theme in enumerate(themes)])
    
    update.message.reply_text(
        f"üéÆ **–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!**\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {user.full_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n{theme_list}",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã", callback_data='show_all')]
        ])
    )
    return SELECT_THEME

def show_all_themes(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö 100 —Ç–µ–º"""
    query = update.callback_query
    query.answer()
    
    theme_list = "\n".join([f"{i+1}. {theme}" for i, theme in enumerate(manager.themes)])
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    for i in range(0, len(theme_list), 4000):
        query.edit_message_text(
            text=f"–í—Å–µ —Ç–µ–º—ã:\n{theme_list[i:i+4000]}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')]
            ])
        )
    return SELECT_THEME

def select_theme(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    
    try:
        if manager.set_theme(chat_id, text):
            theme = manager.games[chat_id]['theme']
            update.message.reply_text(f"‚úÖ –¢–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞: **{theme}**\n\n"
                                     "‚è±Ô∏è –£ –∏–≥—Ä–æ–∫–æ–≤ –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–æ–≤!",
                                     parse_mode="Markdown")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–≥—Ä–æ–∫–∞–º
            for member in context.bot.get_chat_members(chat_id):
                if not member.user.is_bot:
                    try:
                        context.bot.send_message(
                            member.user.id,
                            f"üéØ –¢–µ–º–∞: **{theme}**\n"
                            "–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)!",
                            parse_mode="Markdown"
                        )
                    except:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {member.user.id}")
            
            # –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –æ—Ç–≤–µ—Ç–æ–≤
            context.job_queue.run_once(end_answers_phase, TIMEOUT, context=chat_id)
            return COLLECT_ANSWERS
    except:
        pass
    
    update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    return SELECT_THEME

def handle_private_answer(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤"""
    user = update.effective_user
    text = update.message.text
    
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É —Å —É—á–∞—Å—Ç–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for chat_id, game in manager.games.items():
        if game['status'] == 'collecting_answers' and user.id in [p for p in game['players']]:
            if manager.add_answer(chat_id, user.id, text):
                update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
            else:
                update.message.reply_text("‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–≤–µ—Ç!")
            break
    else:
        update.message.reply_text("‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä, –≥–¥–µ –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ.")
    
    return COLLECT_ANSWERS

def end_answers_phase(context: CallbackContext):
    chat_id = context.job.context
    game = manager.games.get(chat_id)
    
    if not game or game['status'] != 'collecting_answers':
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –ò–ò –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    manager.start_voting(chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    options = game['voting_options']
    answers_text = "\n\n".join(
        [f"üîπ –û—Ç–≤–µ—Ç {idx+1}: {ans}" for idx, ans in enumerate(options)]
    )
    
    context.bot.send_message(
        chat_id,
        f"üïí –í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã:\n\n{answers_text}\n\n"
        "‚ùì **–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å!**",
        parse_mode="Markdown"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º
    keyboard = [
        [InlineKeyboardButton(f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}", callback_data=f"vote_{i}")]
        for i in range(len(options))
    ]
    
    for user_id in game['players']:
        try:
            context.bot.send_message(
                user_id,
                "üó≥Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:**",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        except:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id}")
    
    # –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    context.job_queue.run_once(end_voting_phase, TIMEOUT, context=chat_id)


def handle_vote(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    user = query.from_user
    data = query.data
    
    try:
        option_idx = int(data.split('_')[1])
        for chat_id, game in manager.games.items():
            if game['status'] == 'voting' and user.id in game['players']:
                if manager.add_vote(chat_id, user.id, option_idx):
                    query.answer("‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!")
                else:
                    query.answer("‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!")
                break
        else:
            query.answer("‚ÑπÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!")
    except:
        query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞!")
    
    return VOTING

def end_voting_phase(context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    chat_id = context.job.context
    game = manager.games.get(chat_id)
    
    if not game or game['status'] != 'voting':
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_text, ai_answer = manager.get_results(chat_id)
    
    context.bot.send_message(
        chat_id,
        f"üèÅ **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
        f"{results_text}\n\n"
        f"ü§ñ **–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:**\n{ai_answer}\n\n"
        "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –î–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        parse_mode="Markdown"
    )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    manager.end_game(chat_id)

def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –∏–≥—Ä—ã"""
    chat_id = update.effective_chat.id
    if chat_id in manager.games:
        manager.end_game(chat_id)
        update.message.reply_text("‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    return ConversationHandler.END

def main():
    updater = Updater(BOT_TOKEN)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_THEME: [
                CallbackQueryHandler(show_all_themes, pattern='^show_all$'),
                CallbackQueryHandler(start, pattern='^back_to_start$'),
                MessageHandler(Filters.text & ~Filters.command, select_theme)
            ],
            COLLECT_ANSWERS: [
                MessageHandler(Filters.text & Filters.private, handle_private_answer)
            ],
            VOTING: [
                CallbackQueryHandler(handle_vote, pattern='^vote_')
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler('cancel', cancel))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤–Ω–µ ConversationHandler
    dp.add_handler(MessageHandler(Filters.private & Filters.text, handle_private_answer))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()